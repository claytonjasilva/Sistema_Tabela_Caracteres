// Matheus Carvalho - 202308675427 - TA
// Guilherme Carvalho-202308675435 - TA
// Guilherme de Moraes Lopes Silva - 202401632473 - TA
// Felipe Dutrain de Sales -202402011359 - TA
// Leonardo Almeida Vaz - 202402626604 - TA


; ---------------------------------------------------------------------
; Validação de Caracteres Simples
; ---------------------------------------------------------------------

; Definições de Constantes
.equ SPACE_CODE = 0x20     ; Código ASCII do espaço
.equ MAX_ADDR = 0x7F       ; Maior código ASCII válido

; Definições de Registros
.def TEMP = r16            ; Registro temporário
.def VALID_FLAG = r17      ; Registro para sinalizar validade (0 = válido, 1 = inválido)

; Inicialização
.org 0x0000                ; Início do programa

start:
    ; Configurar PORTD como entrada e PORTC como saída
    clr r16                ; Limpa r16 para configurar como entrada
    out DDRD, r16          ; Configura todos os pinos de PORTD como entrada
    ldi r16, 0xFF          ; Configura r16 para saída
    out DDRC, r16          ; Configura todos os pinos de PORTC como saída

main:
    ; Ler caractere da entrada (PORTD)
    in TEMP, PIND          ; Lê o valor de PORTD e armazena em TEMP
    
    ; Validar o caractere
    cpi TEMP, SPACE_CODE   ; Compara TEMP com o menor código válido (espaço)
    brlo invalid           ; Salta para "invalid" se for menor que SPACE_CODE
    cpi TEMP, MAX_ADDR     ; Compara TEMP com o maior código válido
    brge invalid           ; Salta para "invalid" se for maior ou igual a MAX_ADDR

    ; Se for válido
    clr VALID_FLAG         ; Define VALID_FLAG como 0 (válido)
    rjmp output            ; Salta para exibir o resultado

invalid:
    ldi VALID_FLAG, 0x01   ; Define VALID_FLAG como 1 (inválido)

output:
    ; Apresentar o resultado na saída (PORTC)
    out PORTC, VALID_FLAG  ; Envia o valor de VALID_FLAG para PORTC
    rjmp main              ; Retorna ao início para nova leitura